Plug 'easymotion/vim-easymotion'
Plug 'preservim/nerdtree'

let mapleader=" "
let localmapleader=" "

set NERDTree
set easymotion
set ideajoin
set multiple-cursors
set surround
set which-key
set notimeout

set clipboard+=unnamed
set clipboard+=ideaput

set showmode

set relativenumber
set number

set ignorecase
set smartcase
set scrolloff=3

set incsearch
set hls

let g:WhichKey_FontSize = 18
let g:WhichKey_KeyColor = "#74c7ec"

" Source ideavimrc
nmap <leader>Z :source ~/.ideavimrc<CR>
let g:WhichKeyDesc_source = "<leader>Z Source .ideavimrc"

" Save
nmap <C-s> :w<CR>

" Redo
nmap U <C-r>

" Exit insert
imap ii <Esc>

" Keep centered when jumping search results
nmap n nzzzv

" Escape in insert mode
" inoremap uu <Esc>

" Use Q for formatting the current paragraph (or visual selection)
vmap Q gq
nmap Q gqap

" These create newlines like o and O but stay in normal mode
nmap <leader>o o<Esc>k
nmap <leader>O O<Esc>j
let g:WhichKeyDesc_newline_k = "<leader>o"
let g:WhichKeyDesc_newline_j = "<leader>O"

" Re-select visual selection after indenting
vnoremap < <gv
vnoremap > >gv

" Maintain cursor position when yanking a visual selection
" vnoremap y myy`y

" Paste replace visual selection without copying it
vnoremap <leader>p "0p
vnoremap <leader>P "0P
vnoremap <leader>y "0y
vnoremap <leader>d "0d

" Easy insertion of a trailing ; or ,
nnoremap .. A;<Esc>
nnoremap ,, A,<Esc>

" Clear search highlighting
nmap <leader>k :noh<CR>
let g:WhichKeyDesc_clear_search = "<leader>k Clear search highlight"

" Clear all notifications
nmap <leader>K :action ClearAllNotifications<CR>
let g:WhichKeyDesc_clear_notifications = "<leader>K Clear all notifications"

" Show settings
nmap <leader>C :action ShowSettings<CR>
let g:WhichKeyDesc_show_settings = "<leader>C Show settings"

" Shortcut for change word
nmap cc cw

" Splits
nmap <leader>V :action SplitVertically<CR>
let g:WhichKeyDesc_split_vertically = "<leader>V Split vertically"
nmap <leader>H :action SplitHorizontally<CR>
let g:WhichKeyDesc_split_horizontally = "<leader>H Split horizontally"
nmap <leader>M :action MoveEditorToOppositeTabGroup<CR>
let g:WhichKeyDesc_move_opposite = "<leader>M Move to opposite tab group"
nmap <c-left> <c-w>h
nmap <c-right> <c-w>l
nmap <c-up> <c-w>k
nmap <c-down> <c-w>j

" Move lines up and down
nmap <A-down> :action MoveLineDown<CR>
nmap <A-up> :action MoveLineUp<CR>
vmap <A-down> :action MoveLineDown<CR>
vmap <A-up> :action MoveLineUp<CR>
imap <A-down> :action MoveLineDown<CR>
imap <A-up> :action MoveLineUp<CR>

" Go to
nmap <leader>f :action GotoFile<CR>
let g:WhichKeyDesc_goto_file = "<leader>f Go to file"
nmap <leader>c :action GotoClass<CR>
let g:WhichKeyDesc_goto_class = "<leader>c Go to class"
nmap <leader>s :action GotoSymbol<CR>
let g:WhichKeyDesc_goto_symbol = "<leader>s Go to symbol"
nmap <leader>D :action GotoDatabaseObject<CR>
let g:WhichKeyDesc_goto_database = "<leader>D Go to database object"
nmap <leader>a :action GotoAction<CR>
vmap <leader>a :action GotoAction<CR>
let g:WhichKeyDesc_goto_action = "<leader>a Go to action"
vmap <leader>A :action SearchEverywhere<CR>
let g:WhichKeyDesc_goto_all = "<leader>A Go to all"
nmap <leader>i :action RecentChangedFiles<CR>
let g:WhichKeyDesc_goto_recent_changed = "<leader>h Go to recent changed files"
nmap <leader>I :action RecentFiles<CR>
let g:WhichKeyDesc_goto_recent = "<leader>H Go to recent files"
nmap <leader>m :action FileStructurePopup<CR>
let g:WhichKeyDesc_goto_recent = "<leader>m Go to file member"

" Find/replace
nmap <leader>F :action FindInPath<CR>
let g:WhichKeyDesc_find = "<leader>F Find in path"
nmap <leader>R :action ReplaceInPath<CR>
let g:WhichKeyDesc_replace = "<leader>R Replace in path"

" Tool windows
let g:WhichKeyDesc_windows = "<leader>e Tool windows"
nmap <S-Bs> :action HideAllWindows<CR>
nmap <S-Space> :action JumpToLastWindow<CR>
nmap <leader>ee :action JumpToLastWindow<CR>
let g:WhichKeyDesc_window_commit = "<leader>ee Last window"
nmap <leader>ec :action ActivateCommitToolWindow<CR>
let g:WhichKeyDesc_window_commit = "<leader>ec Commit"
nmap <leader>et :action ActivateTerminalToolWindow<CR>
let g:WhichKeyDesc_window_terminal = "<leader>et Terminal"
nmap <leader>es :action ActivateStructureToolWindow<CR>
let g:WhichKeyDesc_window_structure = "<leader>es Structure"
nmap <leader>ef :action ActivateFindToolWindow<CR>
let g:WhichKeyDesc_window_find = "<leader>ef Find"
nmap <leader>er :action ActivateRunToolWindow<CR>
let g:WhichKeyDesc_window_run = "<leader>er Run"
nmap <leader>ed :action ActivateDebugToolWindow<CR>
let g:WhichKeyDesc_window_debug = "<leader>ed Debug"
nmap <leader>eD :action ActivateDatabaseToolWindow<CR>
let g:WhichKeyDesc_window_database = "<leader>eD Database"
nmap <leader>eg :action ActivateVersionControlToolWindow<CR>
let g:WhichKeyDesc_window_vcs = "<leader>eg Git"
nmap <leader>ep :action ActivatePullRequestsToolWindow<CR>
let g:WhichKeyDesc_window_pr = "<leader>ep Pull requests"
nmap <leader>eb :action ActivateBookmarksToolWindow<CR>
let g:WhichKeyDesc_window_bookmarks = "<leader>eb Bookmarks"
nmap <leader>en :action ActivateNotificationsToolWindow<CR>
let g:WhichKeyDesc_window_notification = "<leader>en Notifications"
nmap <leader>en :action ActivateAIAssistantToolWindow<CR>
let g:WhichKeyDesc_window_ai = "<leader>ea AI Assistant"

" Close editors/tabs
nmap qq :action CloseContent<CR>
let g:WhichKeyDesc_close = "qq Close current"
nmap qo :action CloseAllEditorsButActive<CR>
let g:WhichKeyDesc_close_other = "qo Close all other"

" Code
nmap <A-Space> :action ShowIntentionActions<CR>
let g:WhichKeyDesc_code = "g Code"
nmap gd :action GotoDeclaration<CR>
let g:WhichKeyDesc_code_declaration = "gd Go to declaration"
nmap gu :action ShowUsages<CR>
let g:WhichKeyDesc_code_show_usages = "gu Show usages"
nmap gU :action FindUsages<CR>
let g:WhichKeyDesc_code_find_usages = "gU Find usages"
nmap gi :action GotoImplementation<CR>
let g:WhichKeyDesc_code_implementation = "gi Go to implementation"
nmap gG :action Generate<CR>
let g:WhichKeyDesc_code_generate = "gG Generate"
nmap gp :action ParameterInfo<CR>
let g:WhichKeyDesc_code_parameters = "gp Parameter info"
nmap gI :action QuickImplementations<CR>
let g:WhichKeyDesc_code_quick_implementations = "gI Quick implementations"
nmap gD :action QuickJavaDoc<CR>
let g:WhichKeyDesc_code_quick_javadoc = "gD Quick documentation"
nmap gJ :action EditorCodeBlockStart<CR>
let g:WhichKeyDesc_code_block_start = "gJ Code block start"
nmap gj :action EditorCodeBlockEnd<CR>
let g:WhichKeyDesc_code_block_end = "gj Code block end"
nmap go :action OverrideMethods<CR>
let g:WhichKeyDesc_code_override = "go Override methods"
nmap gm :action ImplementMethods<CR>
let g:WhichKeyDesc_code_implement_methods = "gm Implement methods"

nmap ge :action ShowErrorDescription<CR>
let g:WhichKeyDesc_code_error = "ge Show error description"

vmap gR :action Refactorings.QuickListPopupAction<CR>
nmap gR :action Refactorings.QuickListPopupAction<CR>
let g:WhichKeyDesc_code_refactor = "gR Refactor"
vmap gr :action RenameElement<CR>
nmap gr :action RenameElement<CR>
let g:WhichKeyDesc_code_refactor = "gr Rename"
vmap gf :action ReformatCode<CR>
nmap gf :action ReformatCode<CR>
let g:WhichKeyDesc_code_reformat = "gf Reformat code"

nmap gc :action CommentByLineComment<CR>
vmap gc :action CommentByLineComment<CR>
let g:WhichKeyDesc_code_line_comment = "gc Line comment"
vmap gC :action CommentByBlockComment<CR>
let g:WhichKeyDesc_code_block_comment = "gC Block comment"

" Vcs
let g:WhichKeyDesc_vcs = "<leader>v Git"
nmap <leader>vn :action VcsShowNextChangeMarker<CR>
let g:WhichKeyDesc_vcs_next_change = "<leader>vn Next change"
nmap <leader>vp :action VcsShowPrevChangeMarker<CR>
let g:WhichKeyDesc_vcs_prev_change = "<leader>vp Previous change"
nmap <leader>vs :action VcsShowCurrentChangeMarker<CR>
let g:WhichKeyDesc_vcs_current_change = "<leader>vs Show change"
nmap <leader>vz :action Vcs.RollbackChangedLines<CR>
let g:WhichKeyDesc_vcs_current_change_revert = "<leader>vz Revert change"

nmap <leader>vy :action Vcs.QuickListPopupAction<CR>
let g:WhichKeyDesc_vcs_quick = "<leader>vy Quick list"
nmap <leader>va :action Annotate<CR>
let g:WhichKeyDesc_vcs_annotate = "<leader>va Blame annotations"
nmap <leader>vr :action Git.ResolveConflicts<CR>
let g:WhichKeyDesc_vcs_conflict = "<leader>vr Resolve conflicts"

nmap <leader>vo :action Github.Open.In.Browser<CR>
let g:WhichKeyDesc_vcs_github_browser = "<leader>vo Open on Github"

" Easymotion
nmap s <Plug>(easymotion-n)
nmap m <Plug>(easymotion-j)
nmap M <Plug>(easymotion-k)
    " <ll>f{char}    |  <Plug>(easymotion-f) |  mapped to fn
    " <ll>F{char}    |  <Plug>(easymotion-F) |  mapped to Fn
    " <ll>t{char}    |  <Plug>(easymotion-t) |  mapped to tn
    " <ll>T{char}    |  <Plug>(easymotion-T) |  mapped to Tn

    " <ll>w          |  <Plug>(easymotion-w) |
    " <ll>W          |  <Plug>(easymotion-W) |
    " <ll>b          |  <Plug>(easymotion-b) |
    " <ll>B          |  <Plug>(easymotion-B) |
    " <ll>e          |  <Plug>(easymotion-e) |
    " <ll>E          |  <Plug>(easymotion-E) |
    " <ll>ge         |  <Plug>(easymotion-ge |
    " <ll>gE         |  <Plug>(easymotion-gE |
    " <ll>j          |  <Plug>(easymotion-j) |
    " <ll>k          |  <Plug>(easymotion-k) |
    " <ll>n          |  <Plug>(easymotion-n) |
    " <ll>N          |  <Plug>(easymotion-N) |
    " <ll>s          |  <Plug>(easymotion-s) |  mapped to sn

" Diagnostics

" Tests
let g:WhichKeyDesc_test = "t Tests"
nmap <leader>tt :action RunClass<CR>
let g:WhichKeyDesc_test_run_class = "tt Run"
nmap <leader>tg :action GotoTest<CR>
let g:WhichKeyDesc_test_go_to = "tg Go to test"
nmap <leader>tr :action Rerun<CR>
let g:WhichKeyDesc_test_rerun = "tr Rerun"
nmap <leader>tf :action RerunFailedTests<CR>
let g:WhichKeyDesc_test_rerun_failed = "tf Rerun failed"
nmap <leader>tc :action ChooseRunConfiguration<CR>
let g:WhichKeyDesc_test_choose = "tc Choose configuration"
nmap <leader>ts :action Stop<CR>
let g:WhichKeyDesc_test_choose = "ts Stop"

" Nerdtree/files
let g:WhichKeyDesc_files = "<leader>n Files"
nmap <leader>nn :NERDTreeToggle<CR>
let g:WhichKeyDesc_files_toggle = "<leader>nn Toggle tree"
nmap <leader>nf :NERDTreeFind<CR>
let g:WhichKeyDesc_files_toggle_show = "<leader>nf Toggle tree, show file"
nmap <leader>nb :action ShowNavBar<CR>
let g:WhichKeyDesc_files_nav = "<leader>nb Show nav bar"

" Paste
" nmap <leader>p :action PasteMultiple<CR>
" let g:WhichKeyDesc_paste = "<leader>p Paste (with history)"

" String manipulation
nmap <leader>S :action osmedile.intellij.stringmanip.PopupChoiceAction<CR>
vmap <leader>S :action osmedile.intellij.stringmanip.PopupChoiceAction<CR>
let g:WhichKeyDesc_string_manipulation = "<leader>S String manipulation"

" Surround
nmap <leader>u :action SurroundWith<CR>
vmap <leader>u :action SurroundWith<CR>
let g:WhichKeyDesc_surround = "<leader>u Surround with"

" Bookmarks
let g:WhichKeyDesc_bookmarks = "<leader>b Bookmarks"
nmap <leader>b<CR> :action ToggleBookmark<CR>
let g:WhichKeyDesc_bookmarks_toggle = "<leader>b<CR> Toggle"
nmap <leader>bA :action ToggleBookmarkA<CR>
nmap <leader>ba :action GotoBookmarkA<CR>
nmap <leader>bB :action ToggleBookmarkB<CR>
nmap <leader>bb :action GotoBookmarkB<CR>
nmap <leader>bC :action ToggleBookmarkC<CR>
nmap <leader>bc :action GotoBookmarkC<CR>
nmap <leader>bD :action ToggleBookmarkD<CR>
nmap <leader>bd :action GotoBookmarkD<CR>
nmap <leader>bE :action ToggleBookmarkE<CR>
nmap <leader>be :action GotoBookmarkE<CR>
nmap <leader>bF :action ToggleBookmarkF<CR>
nmap <leader>bf :action GotoBookmarkF<CR>
nmap <leader>bG :action ToggleBookmarkG<CR>
nmap <leader>bg :action GotoBookmarkG<CR>
nmap <leader>bH :action ToggleBookmarkH<CR>
nmap <leader>bh :action GotoBookmarkH<CR>
nmap <leader>bI :action ToggleBookmarkI<CR>
nmap <leader>bi :action GotoBookmarkI<CR>
nmap <leader>bJ :action ToggleBookmarkJ<CR>
nmap <leader>bj :action GotoBookmarkJ<CR>
nmap <leader>bK :action ToggleBookmarkK<CR>
nmap <leader>bk :action GotoBookmarkK<CR>
nmap <leader>bL :action ToggleBookmarkL<CR>
nmap <leader>bl :action GotoBookmarkL<CR>
nmap <leader>bM :action ToggleBookmarkM<CR>
nmap <leader>bm :action GotoBookmarkM<CR>
nmap <leader>bN :action ToggleBookmarkN<CR>
nmap <leader>bn :action GotoBookmarkN<CR>
nmap <leader>bO :action ToggleBookmarkO<CR>
nmap <leader>bo :action GotoBookmarkO<CR>
nmap <leader>bP :action ToggleBookmarkP<CR>
nmap <leader>bp :action GotoBookmarkP<CR>
nmap <leader>bQ :action ToggleBookmarkQ<CR>
nmap <leader>bq :action GotoBookmarkQ<CR>
nmap <leader>bR :action ToggleBookmarkR<CR>
nmap <leader>br :action GotoBookmarkR<CR>
nmap <leader>bS :action ToggleBookmarkS<CR>
nmap <leader>bs :action GotoBookmarkS<CR>
nmap <leader>bT :action ToggleBookmarkT<CR>
nmap <leader>bt :action GotoBookmarkT<CR>
nmap <leader>bU :action ToggleBookmarkU<CR>
nmap <leader>bu :action GotoBookmarkU<CR>
nmap <leader>bV :action ToggleBookmarkV<CR>
nmap <leader>bv :action GotoBookmarkV<CR>
nmap <leader>bW :action ToggleBookmarkW<CR>
nmap <leader>bw :action GotoBookmarkW<CR>
nmap <leader>bX :action ToggleBookmarkX<CR>
nmap <leader>bx :action GotoBookmarkX<CR>
nmap <leader>bY :action ToggleBookmarkY<CR>
nmap <leader>by :action GotoBookmarkY<CR>
nmap <leader>bZ :action ToggleBookmarkZ<CR>
nmap <leader>bz :action GotoBookmarkZ<CR>
